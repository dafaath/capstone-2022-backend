{"openapi": "3.0.2", "info": {"title": "emodiary API", "version": "1.0.0"}, "paths": {"/authentications/login": {"post": {"tags": ["Authentication"], "summary": "Login", "description": "This path is for login after register, the login is using OAuth2 standard, you will get access token and refresh token in response.\nAccess token will be only valid for 60 minutes, after which you need to gain a new one in Refresh path, using refresh token.\n", "operationId": "login_authentications_login_post", "parameters": [{"description": "The sender user agent", "required": true, "schema": {"title": "User-Agent", "type": "string", "description": "The sender user agent"}, "example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36", "name": "user-agent", "in": "header"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_authentications_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginResponse"}}}}, "401": {"description": "Password or email is not correct", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/authentications/login/google": {"post": {"tags": ["Authentication"], "summary": "Login Google", "description": "This path is for sending google JWT after login with google, you will get access token and refresh token in response.\nAccess token will be only valid for 60 minutes, after which you need to gain a new one in Refresh path, using refresh token.\n", "operationId": "login_google_authentications_login_google_post", "parameters": [{"description": "The sender user agent", "required": true, "schema": {"title": "User-Agent", "type": "string", "description": "The sender user agent"}, "example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36", "name": "user-agent", "in": "header"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_google_authentications_login_google_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginResponse"}}}}, "401": {"description": "The google token is invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/authentications/refresh": {"post": {"tags": ["Authentication"], "summary": "Refresh", "description": "This path is used to refresh the access token given after login, the refresh token is only valid for 60 minutes, after 60 minutes you have to gain a new access token", "operationId": "refresh_authentications_refresh_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenBody"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenResponse"}}}}, "401": {"description": "Refresh token is either expired or invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "404": {"description": "When user_id or session_id in the jwt is not found in database", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/": {"get": {"tags": ["User"], "summary": "Get Many User", "description": "Get all users", "operationId": "get_many_user_users__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetAllUserResponse"}}}}, "403": {"description": "Only user with role admin can access this resource.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["User", "Authentication"], "summary": "Register", "description": "Register new user", "operationId": "register_users__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterResponse"}}}}, "409": {"description": "Email or phone is already exists in db", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/{user_id}": {"get": {"tags": ["User"], "summary": "Get One User", "description": "Get users by id", "operationId": "get_one_user_users__user_id__get", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format"}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetOneUserResponse"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["User"], "summary": "Delete User Route", "description": "Delete user data", "operationId": "delete_user_route_users__user_id__delete", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format"}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteUserResponse"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["User"], "summary": "Update User Route", "description": "Update user data", "operationId": "update_user_route_users__user_id__patch", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format"}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUserBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUserResponse"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyHTTPError"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/examples/login": {"get": {"tags": ["Examples"], "summary": "Login Google Example", "description": "Example of login with google, this is a static html path", "operationId": "login_google_example_examples_login_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/": {"get": {"tags": ["Health Check"], "summary": "Health Check", "operationId": "health_check__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResponseTemplate"}}}}}}}}, "components": {"schemas": {"Body_login_authentications_login_post": {"title": "Body_login_authentications_login_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_login_google_authentications_login_google_post": {"title": "Body_login_google_authentications_login_google_post", "required": ["credential"], "type": "object", "properties": {"credential": {"title": "Credential", "type": "string", "description": "The google token that you got after login with google"}}}, "DeleteUserResponse": {"title": "DeleteUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "GetAllUserResponse": {"title": "GetAllUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"title": "Data", "type": "array", "items": {"$ref": "#/components/schemas/UserResponse"}}}}, "GetOneUserResponse": {"title": "GetOneUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "LoginResponse": {"title": "LoginResponse", "required": ["access_token", "refresh_token", "token_type", "expires_in"], "type": "object", "properties": {"access_token": {"title": "Access Token", "type": "string", "description": "JWT access token that will expire in 60 minutes", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImYzZjYxZWQ4LTNhMDYtNDhlNi05NGE4LTkzZTU2ZDg0YjI5NiIsImVtYWlsIjoiZGFmYUBnbWFpbC5jb20iLCJwaG9uZSI6Iis2MjgxMzI5MDgyMzE0czEiLCJpc19hY3RpdmUiOnRydWUsImV4cCI6MTY1MjEwMjk5MCwiaWF0IjoxNjUyMTAyMDkwfQ.SyhCaUvvvB7jMk5T7dEsGScHy6Pe5FqZhIkBEnJggT0"}, "refresh_token": {"title": "Refresh Token", "type": "string", "description": "Refresh access token, use this to refresh the access token above in /authentications/refresh path", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiOWEwYmFlZDMtMzMwMy00MjczLTkzYjYtM2NiMjUzOGI1MjdjIiwidXNlcl9pZCI6IjM3YjVlNjU4LWM3NjUtNGYyZC1hNWEwLWJjNjgwNWZjY2ZhYiIsImlhdCI6MTY1MjE2MjIyN30.EXkeCHuqA93MSTbkAoNJU06qsbQcoBRPnH6RZYEOYvo"}, "token_type": {"title": "Token Type", "type": "string", "example": "bearer"}, "expires_in": {"title": "Expires In", "type": "integer", "description": "Time until access token expires (in seconds)", "example": 3600}, "scope": {"title": "Scope", "type": "string", "description": "Authorize list of actions", "example": "create"}}}, "MyHTTPError": {"title": "MyHTTPError", "required": ["detail"], "type": "object", "properties": {"detail": {"title": "Detail", "type": "string", "description": "The reason for the error", "example": "Error reasons"}}}, "RefreshTokenBody": {"title": "RefreshTokenBody", "required": ["refreshToken"], "type": "object", "properties": {"refreshToken": {"title": "Refreshtoken", "type": "string", "description": "Refresh token gained from response after login", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiOWEwYmFlZDMtMzMwMy00MjczLTkzYjYtM2NiMjUzOGI1MjdjIiwidXNlcl9pZCI6IjM3YjVlNjU4LWM3NjUtNGYyZC1hNWEwLWJjNjgwNWZjY2ZhYiIsImlhdCI6MTY1MjE2MjIyN30.EXkeCHuqA93MSTbkAoNJU06qsbQcoBRPnH6RZYEOYvo"}}}, "RefreshTokenResponse": {"title": "RefreshTokenResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/RefreshTokenResponseData"}}}, "RefreshTokenResponseData": {"title": "RefreshTokenResponseData", "required": ["accessToken"], "type": "object", "properties": {"accessToken": {"title": "Accesstoken", "type": "string", "description": "JWT access token that will expire in 60 minutes", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImYzZjYxZWQ4LTNhMDYtNDhlNi05NGE4LTkzZTU2ZDg0YjI5NiIsImVtYWlsIjoiZGFmYUBnbWFpbC5jb20iLCJwaG9uZSI6Iis2MjgxMzI5MDgyMzE0czEiLCJpc19hY3RpdmUiOnRydWUsImV4cCI6MTY1MjEwMjk5MCwiaWF0IjoxNjUyMTAyMDkwfQ.SyhCaUvvvB7jMk5T7dEsGScHy6Pe5FqZhIkBEnJggT0"}}}, "RegisterBody": {"title": "RegisterBody", "required": ["email", "phone", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "password": {"title": "Password", "type": "string", "description": "User password"}}}, "RegisterResponse": {"title": "RegisterResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "ResponseTemplate": {"title": "ResponseTemplate", "required": ["message"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"title": "Data", "type": "object", "description": "Response data"}}}, "UpdateUserBody": {"title": "UpdateUserBody", "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "currentPassword": {"title": "Currentpassword", "type": "string", "description": "The user current password"}, "newPassword": {"title": "Newpassword", "type": "string", "description": "The user new password"}}}, "UpdateUserResponse": {"title": "UpdateUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "UserResponse": {"title": "UserResponse", "required": ["email", "id", "isActive", "photo", "timeCreated", "timeUpdated", "role"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "id": {"title": "Id", "type": "string", "description": "User id in UUID format", "format": "uuid"}, "isActive": {"title": "Isactive", "type": "boolean", "description": "Is user is an active user or not"}, "photo": {"title": "Photo", "type": "string", "description": "The path to the user photo profile"}, "timeCreated": {"title": "Timecreated", "type": "string", "description": "The time this object is created", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "timeUpdated": {"title": "Timeupdated", "type": "string", "description": "The time this object is last updated", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "description": "The user role, consist of <enum 'UserRole'>."}}}, "UserRole": {"title": "UserRole", "enum": ["ADMIN", "REGULAR"], "type": "string", "description": "An enumeration."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "authentications/login"}}}}}}