{"openapi": "3.0.2", "info": {"title": "Emodiary API", "description": "Emodiary backend api for capstone project in Bangkit 2022", "version": "1.0.0"}, "paths": {"/authentications/login": {"post": {"tags": ["Authentication"], "summary": "Login", "description": "This path is for login after register, the login is using OAuth2 standard, you will get access token and refresh token in response.\nAccess token will be only valid for 60 minutes, after which you need to gain a new one in Refresh path, using refresh token.\n", "operationId": "login_authentications_login_post", "parameters": [{"description": "The sender user agent", "required": true, "schema": {"title": "User-Agent", "type": "string", "description": "The sender user agent"}, "example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36", "name": "user-agent", "in": "header"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_authentications_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "401": {"description": "Password or email is not correct", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/authentications/login-test": {"post": {"tags": ["Authentication"], "summary": "Login Test", "description": "TEST Version of login, access token only last 10 seconds", "operationId": "login_test_authentications_login_test_post", "parameters": [{"description": "The sender user agent", "required": true, "schema": {"title": "User-Agent", "type": "string", "description": "The sender user agent"}, "example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36", "name": "user-agent", "in": "header"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_test_authentications_login_test_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "401": {"description": "Password or email is not correct", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/authentications/login/google": {"post": {"tags": ["Authentication"], "summary": "Login Google", "description": "This path is for sending google JWT after login with google, you will get access token and refresh token in response.\nAccess token will be only valid for 60 minutes, after which you need to gain a new one in Refresh path, using refresh token.\n", "operationId": "login_google_authentications_login_google_post", "parameters": [{"description": "The sender user agent", "required": true, "schema": {"title": "User-Agent", "type": "string", "description": "The sender user agent"}, "example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36", "name": "user-agent", "in": "header"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_google_authentications_login_google_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "401": {"description": "The google token is invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/authentications/refresh": {"post": {"tags": ["Authentication"], "summary": "Refresh", "description": "This path is used to refresh the access token given after login, the refresh token is only valid for 60 minutes, after 60 minutes you have to gain a new access token", "operationId": "refresh_authentications_refresh_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenBody"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "401": {"description": "Refresh token is either expired or invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "404": {"description": "When user_id or session_id in the jwt is not found in database", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/users/": {"get": {"tags": ["User"], "summary": "Get All User Route", "description": "Get all users", "operationId": "get_all_user_route_users__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetAllUserResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "Only user with role admin can access this resource.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["User", "Authentication"], "summary": "Register", "description": "Register new user", "operationId": "register_users__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RegisterResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "409": {"description": "Email is already exists in db", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/users/{user_id}/photo": {"post": {"tags": ["User"], "summary": "Save User Picture Route", "description": "Upload user profile picture", "operationId": "save_user_picture_route_users__user_id__photo_post", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format", "format": "uuid"}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_save_user_picture_route_users__user_id__photo_post"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SaveUserPhotoResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/users/{user_id}": {"get": {"tags": ["User"], "summary": "Get One User Route", "description": "Get users by id", "operationId": "get_one_user_route_users__user_id__get", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format", "format": "uuid"}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetOneUserResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["User"], "summary": "Delete User Route", "description": "Delete user data", "operationId": "delete_user_route_users__user_id__delete", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format", "format": "uuid"}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteUserResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["User"], "summary": "Update User Route", "description": "Update user data", "operationId": "update_user_route_users__user_id__patch", "parameters": [{"description": "The user id in UUID format", "required": true, "schema": {"title": "User Id", "type": "string", "description": "The user id in UUID format", "format": "uuid"}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUserBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUserResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/diaries/": {"get": {"tags": ["Diary"], "summary": "Get User Diary Route", "description": "Get YOUR diary", "operationId": "get_user_diary_route_diaries__get", "parameters": [{"description": "Page of the pagination", "required": false, "schema": {"title": "Page", "exclusiveMinimum": 0.0, "type": "integer", "description": "Page of the pagination"}, "name": "page", "in": "query"}, {"description": "The content size per page", "required": false, "schema": {"title": "Size", "exclusiveMinimum": 0.0, "type": "integer", "description": "The content size per page"}, "name": "size", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetAllDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["Diary"], "summary": "Create Diary Route", "description": "Create new diary", "operationId": "create_diary_route_diaries__post", "parameters": [{"description": "Set false for testing purposes only (so it can limit the translate cost)", "required": false, "schema": {"title": "Translate", "type": "boolean", "description": "Set false for testing purposes only (so it can limit the translate cost)", "default": true}, "name": "translate", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateDiaryBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/diaries/all": {"get": {"tags": ["Diary"], "summary": "Get All Diary Route", "description": "Get all diaries from database", "operationId": "get_all_diary_route_diaries_all_get", "parameters": [{"description": "Page of the pagination", "required": false, "schema": {"title": "Page", "exclusiveMinimum": 0.0, "type": "integer", "description": "Page of the pagination"}, "name": "page", "in": "query"}, {"description": "The content size per page", "required": false, "schema": {"title": "Size", "exclusiveMinimum": 0.0, "type": "integer", "description": "The content size per page"}, "name": "size", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetAllDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "Only user with role admin can access this resource.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/diaries/{diary_id}": {"get": {"tags": ["Diary"], "summary": "Get One Diary Route", "description": "Get diaries by id", "operationId": "get_one_diary_route_diaries__diary_id__get", "parameters": [{"description": "The diary id in UUID format", "required": true, "schema": {"title": "Diary Id", "type": "string", "description": "The diary id in UUID format", "format": "uuid"}, "name": "diary_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetOneDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["Diary"], "summary": "Delete Diary Route", "description": "Delete diary data", "operationId": "delete_diary_route_diaries__diary_id__delete", "parameters": [{"description": "The diary id in UUID format", "required": true, "schema": {"title": "Diary Id", "type": "string", "description": "The diary id in UUID format", "format": "uuid"}, "name": "diary_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["Diary"], "summary": "Update Diary Route", "description": "Update diary data", "operationId": "update_diary_route_diaries__diary_id__patch", "parameters": [{"description": "The diary id in UUID format", "required": true, "schema": {"title": "Diary Id", "type": "string", "description": "The diary id in UUID format", "format": "uuid"}, "name": "diary_id", "in": "path"}, {"description": "Set false for testing purposes only (so it can limit the translate cost)", "required": false, "schema": {"title": "Translate", "type": "boolean", "description": "Set false for testing purposes only (so it can limit the translate cost)", "default": true}, "name": "translate", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateDiaryBody"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateDiaryResponse"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "403": {"description": "The user id in bearer is not matching with path and the user is not admin", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/examples/login": {"get": {"tags": ["Examples"], "summary": "Login Google Example", "description": "Example of login with google, this is a static html path", "operationId": "login_google_example_examples_login_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}, "400": {"description": "Request error", "content": {"text/html": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}, "/": {"get": {"tags": ["Health Check"], "summary": "Health Check", "operationId": "health_check__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResponseTemplate"}}}}, "400": {"description": "Request error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponseTemplate"}}}}}}}}, "components": {"schemas": {"Body_login_authentications_login_post": {"title": "Body_login_authentications_login_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_login_google_authentications_login_google_post": {"title": "Body_login_google_authentications_login_google_post", "required": ["credential"], "type": "object", "properties": {"credential": {"title": "Credential", "type": "string", "description": "The google token that you got after login with google"}}}, "Body_login_test_authentications_login_test_post": {"title": "Body_login_test_authentications_login_test_post", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Body_save_user_picture_route_users__user_id__photo_post": {"title": "Body_save_user_picture_route_users__user_id__photo_post", "required": ["file"], "type": "object", "properties": {"file": {"title": "File", "type": "string", "description": "The new user profile picture, must be in png, jpeg, or jpg format", "format": "binary"}}}, "CreateDiaryBody": {"title": "CreateDiaryBody", "required": ["title", "content"], "type": "object", "properties": {"title": {"title": "Title", "type": "string", "description": "The diary title"}, "content": {"title": "Content", "type": "string", "description": "The diary content"}}}, "CreateDiaryResponse": {"title": "CreateDiaryResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/DiaryResponseWithoutUser"}}}, "DeleteDiaryResponse": {"title": "DeleteDiaryResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/DiaryResponseWithoutUser"}}}, "DeleteUserResponse": {"title": "DeleteUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "DiaryResponseWithoutUser": {"title": "DiaryResponseWithoutUser", "required": ["title", "content", "id", "translatedContent", "emotion", "userId", "timeCreated", "timeUpdated"], "type": "object", "properties": {"title": {"title": "Title", "type": "string", "description": "The diary title"}, "content": {"title": "Content", "type": "string", "description": "The diary content"}, "id": {"title": "Id", "type": "string", "description": "Diary id in UUID format"}, "translatedContent": {"title": "Translatedcontent", "type": "string", "description": "The diary content in english after translating with google translate"}, "emotion": {"title": "Emotion", "type": "string", "description": "Diary emotion based on machine learning output"}, "userId": {"title": "Userid", "type": "string", "description": "The user id in UUID format that owns this diary"}, "timeCreated": {"title": "Timecreated", "type": "string", "description": "The time this object is created, represented in ISO 8601 format", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "timeUpdated": {"title": "Timeupdated", "type": "string", "description": "The time this object is last updated, represented in ISO 8601 format", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}}}, "GetAllDiaryResponse": {"title": "GetAllDiaryResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"title": "Data", "type": "array", "items": {"$ref": "#/components/schemas/DiaryResponseWithoutUser"}}}}, "GetAllUserResponse": {"title": "GetAllUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"title": "Data", "type": "array", "items": {"$ref": "#/components/schemas/UserResponse"}}}}, "GetOneDiaryResponse": {"title": "GetOneDiaryResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/DiaryResponseWithoutUser"}}}, "GetOneUserResponse": {"title": "GetOneUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "HTTPErrorResponseTemplate": {"title": "HTTPErrorResponseTemplate", "required": ["message"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "The reason for the error", "example": "error reasons"}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "LoginResponse": {"title": "LoginResponse", "required": ["email", "fullname", "id", "isActive", "photo", "timeCreated", "timeUpdated", "role", "message", "access_token", "refresh_token", "token_type", "expires_in"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "fullname": {"title": "Fullname", "type": "string", "description": "User full name", "example": "James Jones"}, "id": {"title": "Id", "type": "string", "description": "User id in UUID format", "format": "uuid"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "isActive": {"title": "Isactive", "type": "boolean", "description": "Is user is an active user or not"}, "photo": {"title": "Photo", "type": "string", "description": "The path to the user photo profile"}, "timeCreated": {"title": "Timecreated", "type": "string", "description": "The time this object is created, represented in ISO 8601 format", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "timeUpdated": {"title": "Timeupdated", "type": "string", "description": "The time this object is last updated, represented in ISO 8601 format ", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "description": "The user role, consist of <enum 'UserRole'>."}, "message": {"title": "Message", "type": "string", "description": "Response message"}, "access_token": {"title": "Access Token", "type": "string", "description": "JWT access token that will expire in 60 minutes", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImYzZjYxZWQ4LTNhMDYtNDhlNi05NGE4LTkzZTU2ZDg0YjI5NiIsImVtYWlsIjoiZGFmYUBnbWFpbC5jb20iLCJwaG9uZSI6Iis2MjgxMzI5MDgyMzE0czEiLCJpc19hY3RpdmUiOnRydWUsImV4cCI6MTY1MjEwMjk5MCwiaWF0IjoxNjUyMTAyMDkwfQ.SyhCaUvvvB7jMk5T7dEsGScHy6Pe5FqZhIkBEnJggT0"}, "refresh_token": {"title": "Refresh Token", "type": "string", "description": "Refresh access token, use this to refresh the access token above in /authentications/refresh path", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiOWEwYmFlZDMtMzMwMy00MjczLTkzYjYtM2NiMjUzOGI1MjdjIiwidXNlcl9pZCI6IjM3YjVlNjU4LWM3NjUtNGYyZC1hNWEwLWJjNjgwNWZjY2ZhYiIsImlhdCI6MTY1MjE2MjIyN30.EXkeCHuqA93MSTbkAoNJU06qsbQcoBRPnH6RZYEOYvo"}, "token_type": {"title": "Token Type", "type": "string", "example": "bearer"}, "expires_in": {"title": "Expires In", "type": "integer", "description": "Time until access token expires (in seconds)", "example": 3600}, "scope": {"title": "Scope", "type": "string", "description": "Authorize list of actions", "example": "create"}}}, "RefreshTokenBody": {"title": "RefreshTokenBody", "required": ["refreshToken"], "type": "object", "properties": {"refreshToken": {"title": "Refreshtoken", "type": "string", "description": "Refresh token gained from response after login", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiOWEwYmFlZDMtMzMwMy00MjczLTkzYjYtM2NiMjUzOGI1MjdjIiwidXNlcl9pZCI6IjM3YjVlNjU4LWM3NjUtNGYyZC1hNWEwLWJjNjgwNWZjY2ZhYiIsImlhdCI6MTY1MjE2MjIyN30.EXkeCHuqA93MSTbkAoNJU06qsbQcoBRPnH6RZYEOYvo"}}}, "RefreshTokenResponse": {"title": "RefreshTokenResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/RefreshTokenResponseData"}}}, "RefreshTokenResponseData": {"title": "RefreshTokenResponseData", "required": ["accessToken"], "type": "object", "properties": {"accessToken": {"title": "Accesstoken", "type": "string", "description": "JWT access token that will expire in 60 minutes", "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImYzZjYxZWQ4LTNhMDYtNDhlNi05NGE4LTkzZTU2ZDg0YjI5NiIsImVtYWlsIjoiZGFmYUBnbWFpbC5jb20iLCJwaG9uZSI6Iis2MjgxMzI5MDgyMzE0czEiLCJpc19hY3RpdmUiOnRydWUsImV4cCI6MTY1MjEwMjk5MCwiaWF0IjoxNjUyMTAyMDkwfQ.SyhCaUvvvB7jMk5T7dEsGScHy6Pe5FqZhIkBEnJggT0"}}}, "RegisterBody": {"title": "RegisterBody", "required": ["email", "fullname", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "fullname": {"title": "Fullname", "type": "string", "description": "User full name", "example": "James Jones"}, "password": {"title": "Password", "type": "string", "description": "User password"}}}, "RegisterResponse": {"title": "RegisterResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "ResponseTemplate": {"title": "ResponseTemplate", "required": ["message"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"title": "Data", "type": "object", "description": "Response data"}}}, "SaveUserPhotoResponse": {"title": "SaveUserPhotoResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "UpdateDiaryBody": {"title": "UpdateDiaryBody", "type": "object", "properties": {"title": {"title": "Title", "type": "string", "description": "The diary title"}, "content": {"title": "Content", "type": "string", "description": "The diary content"}}}, "UpdateDiaryResponse": {"title": "UpdateDiaryResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/DiaryResponseWithoutUser"}}}, "UpdateUserBody": {"title": "UpdateUserBody", "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "currentPassword": {"title": "Currentpassword", "type": "string", "description": "The user current password"}, "newPassword": {"title": "Newpassword", "type": "string", "description": "The user new password"}}}, "UpdateUserResponse": {"title": "UpdateUserResponse", "required": ["message", "data"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "Message from server", "example": "Server is ok"}, "data": {"$ref": "#/components/schemas/UserResponse"}}}, "UserResponse": {"title": "UserResponse", "required": ["email", "fullname", "id", "isActive", "photo", "timeCreated", "timeUpdated", "role"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "description": "User email", "format": "email", "example": "example@gmail.com"}, "fullname": {"title": "Fullname", "type": "string", "description": "User full name", "example": "James Jones"}, "id": {"title": "Id", "type": "string", "description": "User id in UUID format", "format": "uuid"}, "phone": {"title": "Phone", "pattern": "\\+[\\d]{8,15}", "type": "string", "description": "User telephone number with country code in front, with a 8-15 character length", "example": "+6281390823143"}, "isActive": {"title": "Isactive", "type": "boolean", "description": "Is user is an active user or not"}, "photo": {"title": "Photo", "type": "string", "description": "The path to the user photo profile"}, "timeCreated": {"title": "Timecreated", "type": "string", "description": "The time this object is created, represented in ISO 8601 format", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "timeUpdated": {"title": "Timeupdated", "type": "string", "description": "The time this object is last updated, represented in ISO 8601 format ", "format": "date-time", "example": "2022-05-12T14:30:28.304902+07:00"}, "role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "description": "The user role, consist of <enum 'UserRole'>."}}}, "UserRole": {"title": "UserRole", "enum": ["ADMIN", "REGULAR"], "type": "string", "description": "An enumeration."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "authentications/login"}}}}}}